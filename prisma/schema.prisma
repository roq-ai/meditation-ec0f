generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model audio {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title            String             @db.VarChar(255)
  category         String             @db.VarChar(255)
  organization_id  String?            @db.Uuid
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @default(now()) @db.Timestamp(6)
  organization     organization?      @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  series_audio     series_audio[]
  subscriber_audio subscriber_audio[]
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  image       String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  audio       audio[]
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  series      series[]
}

model series {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String         @db.VarChar(255)
  organization_id String?        @db.Uuid
  created_at      DateTime       @default(now()) @db.Timestamp(6)
  updated_at      DateTime       @default(now()) @db.Timestamp(6)
  organization    organization?  @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  series_audio    series_audio[]
}

model series_audio {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  series_id  String?  @db.Uuid
  audio_id   String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  audio      audio?   @relation(fields: [audio_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  series     series?  @relation(fields: [series_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model subscriber_audio {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?  @db.Uuid
  audio_id   String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  audio      audio?   @relation(fields: [audio_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email            String             @unique @db.VarChar(255)
  firstName        String?            @db.VarChar(255)
  lastName         String?            @db.VarChar(255)
  roq_user_id      String             @db.VarChar(255)
  tenant_id        String             @db.VarChar(255)
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @default(now()) @db.Timestamp(6)
  organization     organization[]
  subscriber_audio subscriber_audio[]
}
